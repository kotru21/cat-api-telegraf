import { Markup } from "telegraf";
import { BaseCommand } from "./BaseCommand.js";
import {
  getUserLikes,
  getCatDetails,
} from "../../application/use-cases/index.js";
import logger from "../../utils/logger.js";

// –ü—Ä–æ—Å—Ç–∞—è in-memory –∫—ç—à —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// key: userId -> { data: [...], ts: number }
const userLikesCache = new Map();
const USER_LIKES_TTL_MS = 30_000; // 30 —Å–µ–∫—É–Ω–¥

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ callback (userId -> boolean processing)
const navigationLocks = new Map();

// –ë–∞–∑–æ–≤—ã–π —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –¥–ª—è Markdown (Telegram classic) ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
function mdEscape(str) {
  if (!str) return "";
  return String(str).replace(/([_*\\`\[\]()~>#+\-=|{}.!])/g, "\\$1");
}

export class MyLikesCommand extends BaseCommand {
  constructor() {
    super("mylikes", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ª–∞–π–∫–∏");
    this.register();
  }

  register() {
    this.composer.command(this.name, async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        const userLikes = await this.getCachedUserLikes(userId, ctx);

        if (!userLikes || userLikes.length === 0) {
          await ctx.reply("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ üòø");
          return;
        }

        await this.sendLikeInfo(ctx, userLikes, 0);
      } catch (error) {
        logger.error(
          { err: error, userId: ctx.from?.id },
          "MyLikesCommand: failed to fetch likes"
        );
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤"
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–∞–π–∫–∞–º
    this.composer.action(/^like_nav:(prev|next):(\d+)$/, async (ctx) => {
      try {
        const userId = ctx.from.id.toString();

        if (navigationLocks.get(userId)) {
          await ctx.answerCbQuery("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...");
          return;
        }
        navigationLocks.set(userId, true);

        const userLikes = await this.getCachedUserLikes(userId, ctx);

        if (!userLikes || userLikes.length === 0) {
          await ctx.answerCbQuery("–°–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –ø—É—Å—Ç");
          navigationLocks.delete(userId);
          return;
        }

        const action = ctx.match[1]; // prev –∏–ª–∏ next
        let currentIndex = parseInt(ctx.match[2]);

        if (action === "next") {
          currentIndex = (currentIndex + 1) % userLikes.length;
        } else {
          currentIndex =
            (currentIndex - 1 + userLikes.length) % userLikes.length;
        }

        logger.debug(
          { userId, action, currentIndex, total: userLikes.length },
          "MyLikesCommand: navigation"
        );

        await this.sendLikeInfo(ctx, userLikes, currentIndex, true);
        await ctx.answerCbQuery();
        navigationLocks.delete(userId);
      } catch (error) {
        logger.error(
          { err: error, userId: ctx.from?.id },
          "MyLikesCommand: likes navigation error"
        );
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        navigationLocks.delete(ctx.from?.id?.toString());
      }
    });

    this.composer.action(/^like_details:(.+)$/, async (ctx) => {
      try {
        const catId = ctx.match[1];
        const catDetails = await this.executeUseCase(
          getCatDetails,
          { id: catId },
          ctx
        );

        if (!catDetails) {
          await ctx.answerCbQuery("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
          return;
        }

        // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const detailsMessage =
          `*${mdEscape(catDetails.breed_name)}*\n\n` +
          (catDetails.description
            ? `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${mdEscape(
                limitText(catDetails.description, 600)
              )}\n\n`
            : "") +
          (catDetails.origin
            ? `*–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:* ${mdEscape(catDetails.origin)}\n`
            : "") +
          (catDetails.temperament
            ? `*–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:* ${mdEscape(catDetails.temperament)}\n`
            : "") +
          (catDetails.life_span
            ? `*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:* ${mdEscape(catDetails.life_span)}\n`
            : "") +
          (catDetails.weight_imperial || catDetails.weight_metric
            ? `*–í–µ—Å:* ${mdEscape(
                catDetails.weight_imperial || "?"
              )} —Ñ—É–Ω—Ç–æ–≤ (${mdEscape(catDetails.weight_metric || "?")} –∫–≥)\n`
            : "") +
          `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:* ${catDetails.count}\n\n` +
          (catDetails.wikipedia_url
            ? `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏](${catDetails.wikipedia_url})`
            : "");

        const photoUrl = catDetails.image_url || this.getFallbackImage();

        try {
          await ctx.replyWithPhoto(
            { url: photoUrl },
            {
              caption: detailsMessage,
              parse_mode: "Markdown",
              ...Markup.inlineKeyboard([
                [Markup.button.callback("üëç –õ–∞–π–∫", `data-${catDetails.id}`)],
              ]),
            }
          );
        } catch (err) {
          logger.warn(
            { err },
            "MyLikesCommand: failed to send details photo, fallback to text"
          );
          await ctx.reply(detailsMessage, { parse_mode: "Markdown" });
        }

        await ctx.answerCbQuery("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ");
      } catch (error) {
        logger.error({ err: error }, "MyLikesCommand: failed to fetch details");
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
      }
    });
  }

  async sendLikeInfo(ctx, userLikes, index, isEdit = false) {
    const likeInfo = userLikes[index];
    if (!likeInfo) return;
    const total = userLikes.length;
    const photoUrl = likeInfo.image_url || this.getFallbackImage();

    const caption =
      `*${mdEscape(likeInfo.breed_name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}*\n\n` +
      `üëç –ó–∞–ø–∏—Å—å ${index + 1} –∏–∑ ${total}` +
      (likeInfo.likes_count !== undefined
        ? `\n‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: ${likeInfo.likes_count}`
        : "");

    const keyboard = this.buildNavigationKeyboard(index, likeInfo.cat_id);

    if (isEdit && ctx.callbackQuery && ctx.callbackQuery.message) {
      try {
        await ctx.editMessageMedia(
          {
            type: "photo",
            media: photoUrl,
            caption,
            parse_mode: "Markdown",
          },
          { reply_markup: keyboard.reply_markup }
        );
      } catch (error) {
        await ctx.editMessageCaption(caption, {
          parse_mode: "Markdown",
          reply_markup: keyboard.reply_markup,
        });
      }
    } else {
      try {
        await ctx.replyWithPhoto(
          { url: photoUrl },
          { caption, parse_mode: "Markdown", ...keyboard }
        );
      } catch (err) {
        logger.warn(
          { err },
          "MyLikesCommand: failed to send photo, fallback to text"
        );
        await ctx.reply(caption, { parse_mode: "Markdown" });
      }
    }
  }

  buildNavigationKeyboard(index, catId) {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", `like_nav:prev:${index}`),
        Markup.button.callback("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è", `like_nav:next:${index}`),
      ],
      [Markup.button.callback("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", `like_details:${catId}`)],
    ]);
  }

  getFallbackImage() {
    // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π URL –∏–ª–∏ —Å—Ç–∞—Ç–∏–∫—É, –µ—Å–ª–∏ –±–æ—Ç –¥–µ–ø–ª–æ–∏—Ç—Å—è –±–µ–∑ public
    return "https://placekitten.com/600/400"; // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback
  }

  async getCachedUserLikes(userId, ctx) {
    const now = Date.now();
    const cached = userLikesCache.get(userId);
    if (cached && now - cached.ts < USER_LIKES_TTL_MS) {
      return cached.data;
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ use-case (—á–µ—Ä–µ–∑ executeUseCase –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    const data = await this.executeUseCase(getUserLikes, { userId }, ctx);
    userLikesCache.set(userId, { data, ts: now });
    return data;
  }
}

export default new MyLikesCommand();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞ (–æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å–ª–æ–≤–∞)
function limitText(text, max) {
  if (!text) return "";
  if (text.length <= max) return text;
  const slice = text.slice(0, max);
  const lastSpace = slice.lastIndexOf(" ");
  return (lastSpace > 0 ? slice.slice(0, lastSpace) : slice) + "‚Ä¶";
}
