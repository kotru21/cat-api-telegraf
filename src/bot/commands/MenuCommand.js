import { Markup } from "telegraf";
import { BaseCommand } from "./BaseCommand.js";
import config from "../../config/index.js";
import {
  getRandomCat,
  getLikesForCat,
  getUserLikes,
  getLeaderboard,
  getCatDetails,
} from "../../application/use-cases/index.js";
import logger from "../../utils/logger.js";

export class MenuCommand extends BaseCommand {
  constructor() {
    super("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é");
    this.register();
  }

  register() {
    this.composer.command(this.name, async (ctx) => {
      return await ctx.reply(
        "üê± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é CatBot* üê±\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        {
          parse_mode: "Markdown",
          ...Markup.keyboard([
            ["üêæ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç", "‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏"],
            ["üèÜ –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
          ]).resize(),
        }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é - –ø—Ä—è–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.composer.hears("üêæ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç", async (ctx) => {
      await ctx.reply("–ü–æ–ª—É—á–∞—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞...");
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /fact
      try {
        const catData = await this.executeUseCase(getRandomCat, {}, ctx);
        const breed = catData.breeds[0];
        const [likes] = await this.executeUseCase(
          getLikesForCat,
          { catId: catData.id },
          ctx
        );

        await ctx.replyWithPhoto(
          { url: catData.url },
          {
            parse_mode: "Markdown",
            caption: `_${breed.name}_\n${breed.description}`,
            ...Markup.inlineKeyboard([
              [
                Markup.button.url("–í–∏–∫–∏–ø–µ–¥–∏—è", breed.wikipedia_url),
                Markup.button.callback(
                  `üëç ${likes?.count || 0}`,
                  `data-${catData.id}`
                ),
              ],
            ]),
          }
        );
      } catch (error) {
        logger.error({ err: error }, "MenuCommand: failed to fetch random cat");
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–∫–∏"
        );
      }
    });

    this.composer.hears("‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏", async (ctx) => {
      await ctx.reply("–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ª–∞–π–∫–∏...");
      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
      try {
        const userId = ctx.from.id.toString();
        const userLikes = await this.executeUseCase(
          getUserLikes,
          { userId },
          ctx
        );

        if (!userLikes || userLikes.length === 0) {
          await ctx.reply("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ üòø");
          return;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await this.sendLikeInfo(ctx, userLikes, 0);
      } catch (error) {
        logger.error({ err: error }, "MenuCommand: failed to fetch user likes");
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤"
        );
      }
    });

    this.composer.hears("üèÜ –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö", async (ctx) => {
      await ctx.reply("–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–π—Ç–∏–Ω–≥...");
      // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
      try {
        const topCats = await this.executeUseCase(
          getLeaderboard,
          { limit: 10 },
          ctx
        );

        if (!topCats || topCats.length === 0) {
          await ctx.reply("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ üòø");
          return;
        }

        let message = "üèÜ *–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤*\n\n";

        topCats.forEach((cat, index) => {
          const medal =
            index === 0
              ? "ü•á"
              : index === 1
              ? "ü•à"
              : index === 2
              ? "ü•â"
              : `${index + 1}.`;
          message += `${medal} *${cat.breed_name}* - ${cat.count} ‚ù§Ô∏è\n`;
        });

        message += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–æ—Ä–æ–¥–µ.";

        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "üìä –î–µ—Ç–∞–ª–∏ –æ –ø–æ—Ä–æ–¥–µ",
              `like_details:${topCats[0].id}`
            ),
          ],
        ]);

        await ctx.replyWithPhoto(
          { url: topCats[0].image_url },
          {
            caption: message,
            parse_mode: "Markdown",
            ...keyboard,
          }
        );
      } catch (error) {
        logger.error(
          { err: error },
          "MenuCommand: failed to fetch leaderboard"
        );
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥"
        );
      }
    });

    this.composer.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", (ctx) => {
      return ctx.reply(
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*\n\n" +
          "üêæ */fact* - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n" +
          "‚ù§Ô∏è */mylikes* - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫–∏\n" +
          "üèÜ */top* - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤\n" +
          "üìã */menu* - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —ç—Ç–æ –º–µ–Ω—é\n\n" +
          `–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å [—Å–∞–π—Ç](${config.WEBSITE_URL}) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ—Ç–æ–≤!`,
        {
          parse_mode: "Markdown",
          disable_web_page_preview: true,
        }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–∞–π–∫–∞–º
    this.composer.action(/^like_nav:(prev|next):(\d+)$/, async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        const userLikes = await this.executeUseCase(
          getUserLikes,
          { userId },
          ctx
        );

        if (!userLikes || userLikes.length === 0) {
          await ctx.answerCbQuery("–°–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –ø—É—Å—Ç");
          return;
        }

        const action = ctx.match[1]; // prev –∏–ª–∏ next
        let currentIndex = parseInt(ctx.match[2]);

        if (action === "next") {
          currentIndex = (currentIndex + 1) % userLikes.length;
        } else {
          currentIndex =
            (currentIndex - 1 + userLikes.length) % userLikes.length;
        }

        await this.sendLikeInfo(ctx, userLikes, currentIndex, true);
        await ctx.answerCbQuery();
      } catch (error) {
        logger.error({ err: error }, "MenuCommand: likes navigation error");
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      }
    });

    this.composer.action(/^like_details:(.+)$/, async (ctx) => {
      try {
        const catId = ctx.match[1];
        const catDetails = await this.executeUseCase(
          getCatDetails,
          { id: catId },
          ctx
        );

        if (!catDetails) {
          await ctx.answerCbQuery("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
          return;
        }

        // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const detailsMessage =
          `*${catDetails.breed_name}*\n\n` +
          `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${catDetails.description}\n\n` +
          `*–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:* ${catDetails.origin}\n` +
          `*–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:* ${catDetails.temperament}\n` +
          `*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:* ${catDetails.life_span}\n` +
          `*–í–µ—Å:* ${catDetails.weight_imperial} —Ñ—É–Ω—Ç–æ–≤ (${catDetails.weight_metric} –∫–≥)\n` +
          `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:* ${catDetails.count}\n\n` +
          `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏](${catDetails.wikipedia_url})`;

        await ctx.replyWithPhoto(
          { url: catDetails.image_url },
          {
            caption: detailsMessage,
            parse_mode: "Markdown",
            ...Markup.inlineKeyboard([
              [Markup.button.callback("üëç –õ–∞–π–∫", `data-${catDetails.id}`)],
            ]),
          }
        );

        await ctx.answerCbQuery("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ");
      } catch (error) {
        logger.error(
          { err: error },
          "MenuCommand: failed to fetch cat details"
        );
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
      }
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è MyLikesCommand
  async sendLikeInfo(ctx, userLikes, index, isEdit = false) {
    const likeInfo = userLikes[index];
    const total = userLikes.length;
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", `like_nav:prev:${index}`),
        Markup.button.callback("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è", `like_nav:next:${index}`),
      ],
      [
        Markup.button.callback(
          "üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
          `like_details:${likeInfo.cat_id}`
        ),
      ],
    ]);

    const caption = `*${likeInfo.breed_name}*\n\nüëç –õ–∞–π–∫ ${
      index + 1
    } –∏–∑ ${total}`;

    if (isEdit && ctx.callbackQuery && ctx.callbackQuery.message) {
      try {
        await ctx.editMessageMedia(
          {
            type: "photo",
            media: likeInfo.image_url,
            caption: caption,
            parse_mode: "Markdown",
          },
          { reply_markup: keyboard.reply_markup }
        );
      } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ —Ç–∞–∫–æ–µ –∂–µ), –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        await ctx.editMessageCaption(caption, {
          parse_mode: "Markdown",
          reply_markup: keyboard.reply_markup,
        });
      }
    } else {
      await ctx.replyWithPhoto(
        { url: likeInfo.image_url },
        {
          caption: caption,
          parse_mode: "Markdown",
          ...keyboard,
        }
      );
    }
  }
}

export default new MenuCommand();
