import { Composer, Markup } from "telegraf";
import catService from "../../services/CatService.js";

class LikeAction {
  constructor() {
    this.composer = new Composer();
    this.register();
  }

  register() {
    this.composer.action(/^data-(.*?)$/, async (ctx) => {
      try {
        const catId = ctx.match[1];
        const userId = ctx.from.id.toString();
        const message = ctx.update.callback_query.message;

        // –ª–∞–π–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const likeAdded = await catService.addLikeToCat(catId, userId);

        if (!likeAdded) {
          // –ï—Å–ª–∏ –ª–∞–π–∫ —É–∂–µ –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          await ctx.answerCbQuery("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –∫–æ—Ç—É üò∫");
          return;
        }

        const [likes] = await catService.getLikesForCat(catId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —á–∏—Å–ª–æ–º –ª–∞–π–∫–æ–≤
        await ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              Markup.button.url(
                "–í–∏–∫–∏–ø–µ–¥–∏—è",
                message.reply_markup.inline_keyboard[0][0].url
              ),
              Markup.button.callback(`üëç ${likes.count}`, `data-${catId}`),
            ],
          ],
        });

        await ctx.answerCbQuery("–õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      }
    });
  }

  middleware() {
    return this.composer;
  }
}

export default new LikeAction();
