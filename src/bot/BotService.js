import { Telegraf } from "telegraf";
import RateLimitMiddleware from "telegraf-ratelimit";
import { incrementMessageCount } from "../utils/messageCounter.js";

export class BotService {
  constructor(config, commands = []) {
    this.config = config;
    this.commands = commands;
    this.bot = null;
  }

  initialize() {
    this.bot = new Telegraf(this.config.BOT_TOKEN);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–æ–≤
    const limitConfig = {
      window: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
      limit: 3, // –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
      onLimitExceeded: (ctx) =>
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫ —á–∞—Å—Ç–æ üôè"),
    };

    this.bot.use(new RateLimitMiddleware(limitConfig));

    // Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use((ctx, next) => {
      incrementMessageCount();
      return next();
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö middleware –∫–æ–º–∞–Ω–¥
    this.commands.forEach((command) => {
      this.bot.use(command.middleware());
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start((ctx) =>
      ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–æ—à–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
      )
    );

    return this.bot;
  }

  async launch() {
    if (!this.bot) {
      this.initialize();
    }
    await this.bot.launch();
    console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
    return this.bot;
  }

  stop(reason = "SIGTERM") {
    if (this.bot) {
      this.bot.stop(reason);
      console.log(`–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${reason})`);
    }
  }
}
