import { Telegraf } from "telegraf";
import RateLimitMiddleware from "telegraf-ratelimit";
import express from "express";
import helmet from "helmet";
import { createServer } from "http";
import cors from "cors";
import path from "path";
import fs from "fs";
import database from "./database/Database.js";
import config from "./config/index.js";
import { incrementMessageCount } from "./utils/messageCounter.js";
import { WebSocketService } from "./web/WebSocketServer.js";
import { setupApiRoutes } from "./web/ApiRoutes.js";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
import factCommand from "./bot/commands/FactCommand.js";
import menuCommand from "./bot/commands/MenuCommand.js";
import myLikesCommand from "./bot/commands/MyLikesCommand.js";
import topCommand from "./bot/commands/TopCommand.js"; // –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
import likeAction from "./bot/actions/LikeAction.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  await database.init();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initBot() {
  const bot = new Telegraf(config.BOT_TOKEN);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏
  const limitConfig = {
    window: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    limit: 3, // –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
    onLimitExceeded: (ctx) =>
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫ —á–∞—Å—Ç–æ üôè"),
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.use(new RateLimitMiddleware(limitConfig));

  // Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use((ctx, next) => {
    incrementMessageCount();
    return next();
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
  bot.use(
    factCommand.middleware(),
    menuCommand.middleware(),
    myLikesCommand.middleware(),
    topCommand.middleware(),
    likeAction.middleware()
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start((ctx) =>
    ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–æ—à–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
  );

  return bot;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
function initWebServer(port) {
  const app = express();
  const server = createServer(app);
  const __dirname = path.resolve();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
  app.use(
    helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          scriptSrc: [
            "'self'",
            "'unsafe-inline'", // –î–æ–±–∞–≤–ª—è–µ–º 'unsafe-inline' –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            "https://cdn.tailwindcss.com",
            "https://cdnjs.cloudflare.com",
          ],
          styleSrc: [
            "'self'",
            "'unsafe-inline'",
            "https://cdnjs.cloudflare.com",
          ],
          imgSrc: ["'self'", "data:", "https:", "http:"],
          connectSrc: ["'self'", "ws:", "wss:"],
          fontSrc: ["'self'", "https://cdnjs.cloudflare.com"],
          objectSrc: ["'none'"],
          upgradeInsecureRequests: [],
        },
      },
      crossOriginEmbedderPolicy: false, // –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    })
  );

  app.use(cors());
  app.use(express.json());
  app.use("/static", express.static(path.join(__dirname, "public")));

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
  const wsService = new WebSocketService(server);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
  setupApiRoutes(app);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTML-–º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.get("/", (req, res) => {
    const filePath = path.join(__dirname, "src/web/views/index.html");
    fs.readFile(filePath, "utf8", (err, html) => {
      if (err) return res.status(500).send("Internal Server Error");
      const modified = html.replace("{{apiPort}}", port);
      res.send(modified);
    });
  });

  app.get("/catDetails", (req, res) => {
    res.sendFile(path.join(__dirname, "src/web/views/catDetails.html"));
  });

  // –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ—Ç–æ–≤
  app.get("/similar", (req, res) => {
    res.sendFile(path.join(__dirname, "src/web/views/similar.html"));
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  server
    .listen(port, () => {
      const hostname = "localhost";
      const httpUrl = `http://${hostname}:${port}`;
      const wsUrl = `ws://${hostname}:${port}/wss`;

      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      console.log(`–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${httpUrl}`);
      console.log(`WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${wsUrl}`);
      console.log(`–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${httpUrl}/admin`);
      console.log(`API –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${httpUrl}/api/leaderboard`);
    })
    .on("error", (err) => {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
      if (err.code === "EADDRINUSE") {
        console.error(`–ü–æ—Ä—Ç ${port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.`);
      }
    });

  return { server, wsService };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function bootstrap() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();

    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    let server = null;
    if (config.WebServer) {
      console.log("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...");
      server = initWebServer(config.expressServerPort);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    const bot = initBot();

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const shutdown = async () => {
      console.log("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      bot.stop("SIGTERM");
      await database.close();
      process.exit(0);
    };

    process.once("SIGINT", shutdown);
    process.once("SIGTERM", shutdown);

    return { bot, server };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bootstrap();
