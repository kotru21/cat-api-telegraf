import { Markup } from "telegraf";
import { BaseCommand } from "./BaseCommand.js";
import { getLeaderboard } from "../../application/use-cases/index.js";
import logger from "../../utils/logger.js";

export class TopCommand extends BaseCommand {
  constructor() {
    super("top", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤");
    this.register();
  }

  register() {
    this.composer.command(this.name, async (ctx) => {
      try {
        const appCtx = this.createAppContext();
        const topCats = await getLeaderboard(appCtx, { limit: 10 }); // –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ—Ä–æ–¥

        if (!topCats || topCats.length === 0) {
          await ctx.reply("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ üòø");
          return;
        }

        let message = "üèÜ *–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥ –∫–æ—Ç–æ–≤*\n\n";

        topCats.forEach((cat, index) => {
          const medal =
            index === 0
              ? "ü•á"
              : index === 1
              ? "ü•à"
              : index === 2
              ? "ü•â"
              : `${index + 1}.`;
          message += `${medal} *${cat.breed_name}* - ${cat.count} ‚ù§Ô∏è\n`;
        });

        message += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–æ—Ä–æ–¥–µ.";

        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "üìä –î–µ—Ç–∞–ª–∏ –æ –ø–æ—Ä–æ–¥–µ",
              `like_details:${topCats[0].id}`
            ),
          ],
        ]);

        //—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —Ç–æ–ø–æ–≤–æ–π –ø–æ—Ä–æ–¥—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.replyWithPhoto(
          { url: topCats[0].image_url },
          {
            caption: message,
            parse_mode: "Markdown",
            ...keyboard,
          }
        );
      } catch (error) {
        logger.error(
          { err: error, userId: ctx.from?.id },
          "TopCommand: failed to fetch leaderboard"
        );
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥"
        );
      }
    });
  }
}

export default new TopCommand();
