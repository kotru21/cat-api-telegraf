import { Telegraf } from "telegraf";
import RateLimitMiddleware from "telegraf-ratelimit";
import express from "express";
import helmet from "helmet";
import { createServer } from "http";
import cors from "cors";
import path from "path";
import fs from "fs";
import database from "./database/Database.js";
import config from "./config/index.js";
import { incrementMessageCount } from "./utils/messageCounter.js";
import { WebSocketService } from "./web/WebSocketServer.js";
import { setupApiRoutes } from "./web/ApiRoutes.js";
import { likesEvents } from "./database/LikesRepository.js";
import session from "express-session";
import crypto from "crypto";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
import factCommand from "./bot/commands/FactCommand.js";
import menuCommand from "./bot/commands/MenuCommand.js";
import myLikesCommand from "./bot/commands/MyLikesCommand.js";
import topCommand from "./bot/commands/TopCommand.js"; // –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
import likeAction from "./bot/actions/LikeAction.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  await database.init();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initBot() {
  const bot = new Telegraf(config.BOT_TOKEN);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏
  const limitConfig = {
    window: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    limit: 3, // –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
    onLimitExceeded: (ctx) =>
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫ —á–∞—Å—Ç–æ üôè"),
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.use(new RateLimitMiddleware(limitConfig));

  // Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use((ctx, next) => {
    incrementMessageCount();
    return next();
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –∫–æ–º–∞–Ω–¥
  bot.use(
    factCommand.middleware(),
    menuCommand.middleware(),
    myLikesCommand.middleware(),
    topCommand.middleware(),
    likeAction.middleware()
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start((ctx) =>
    ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–æ—à–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
  );

  return bot;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
function initWebServer(port) {
  const app = express();
  const server = createServer(app);
  const __dirname = path.resolve();

  app.set("trust proxy", 1);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
  app.use(
    helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          scriptSrc: [
            "'self'",
            "'unsafe-inline'", // 'unsafe-inline' –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            "https://cdn.tailwindcss.com",
            "https://cdnjs.cloudflare.com",
            "https://telegram.org",
          ],
          scriptSrcAttr: ["'unsafe-inline'"], // –î–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
          styleSrc: [
            "'self'",
            "'unsafe-inline'",
            "https://cdnjs.cloudflare.com",
          ],
          imgSrc: ["'self'", "data:", "https:", "http:"],
          connectSrc: ["'self'", "ws:", "wss:"],
          fontSrc: ["'self'", "https://cdnjs.cloudflare.com"],
          objectSrc: ["'none'"],
          frameSrc: ["'self'", "https://oauth.telegram.org"],
          // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
          childSrc: ["'self'", "https://oauth.telegram.org"],
          upgradeInsecureRequests: [],
        },
      },
      crossOriginEmbedderPolicy: false, // –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    })
  );

  app.use(cors());
  app.use(express.json());
  app.use("/static", express.static(path.join(__dirname, "public")));

  app.use(
    session({
      secret:
        process.env.SESSION_SECRET || crypto.randomBytes(32).toString("hex"),
      resave: false,
      saveUninitialized: false,
      cookie: {
        secure: process.env.NODE_ENV === "production",
        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
        httpOnly: true,
        sameSite: "lax",
      },
    })
  );

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
  const wsService = new WebSocketService(server);

  //  –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  likesEvents.on("leaderboardChanged", async () => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const changed = await wsService.updateLeaderboardHash();
    if (changed) {
      wsService.broadcastData({ leaderboardChanged: true });
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
  setupApiRoutes(app);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTML-–º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.get("/", (req, res) => {
    const filePath = path.join(__dirname, "src/web/views/index.html");
    fs.readFile(filePath, "utf8", (err, html) => {
      if (err) return res.status(500).send("Internal Server Error");

      res.send(html);
    });
  });

  app.get("/catDetails", (req, res) => {
    res.sendFile(path.join(__dirname, "src/web/views/catDetails.html"));
  });

  // –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ—Ç–æ–≤
  app.get("/similar", (req, res) => {
    res.sendFile(path.join(__dirname, "src/web/views/similar.html"));
  });

  // –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  app.get("/login", (req, res) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    if (req.session.user) {
      return res.redirect("/profile");
    }
    res.sendFile(path.join(__dirname, "src/web/views/login.html"));
  });

  app.get("/profile", (req, res) => {
    console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ /profile, —Å–µ—Å—Å–∏—è:", req.session);

    if (!req.session.user) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login");
      return res.redirect("/login");
    }

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", req.session.user);
    res.sendFile(path.join(__dirname, "src/web/views/profile.html"));
  });

  app.get("/debug-session", (req, res) => {
    res.json({
      sessionExists: !!req.session,
      sessionUser: req.session?.user || null,
      cookies: req.headers.cookie,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Telegram Login Widget
  app.get("/auth/telegram/callback", (req, res) => {
    try {
      console.log("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç Telegram:", req.query);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
      const {
        id,
        first_name,
        last_name,
        username,
        photo_url,
        auth_date,
        hash,
      } = req.query;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ hash
      const botToken = config.BOT_TOKEN;
      const secretKey = crypto.createHash("sha256").update(botToken).digest();

      //  –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Ö–µ—à
      const dataCheckString = Object.keys(req.query)
        .filter((key) => key !== "hash")
        .sort()
        .map((key) => `${key}=${req.query[key]}`)
        .join("\n");

      const hmac = crypto
        .createHmac("sha256", secretKey)
        .update(dataCheckString)
        .digest("hex");

      // –ï—Å–ª–∏ —Ö–µ—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
      if (hmac !== hash) {
        console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–µ—à –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram");
        return res.redirect("/login?error=invalid_hash");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
      const authDate = parseInt(auth_date);
      const currentTime = Math.floor(Date.now() / 1000);
      if (currentTime - authDate > 86400) {
        return res.redirect("/login?error=expired");
      }

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      req.session.user = {
        id,
        first_name,
        last_name,
        username,
        photo_url,
      };

      console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏:", req.session.user);

      req.session.save((err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:", err);
          return res.redirect("/login?error=session_error");
        }

        console.log("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /profile");
        res.redirect("/profile");
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:", error);
      res.redirect("/login?error=auth_failed");
    }
  });

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  app.get("/logout", (req, res) => {
    req.session.destroy();
    res.redirect("/");
  });

  server.listen(port, () => {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ —Å–ª–µ—à–∞ –≤ –∫–æ–Ω—Ü–µ
    const baseUrl = (
      process.env.WEBSITE_URL || `http://localhost:${port}`
    ).replace(/\/$/, "");

    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${baseUrl}`);
    console.log(
      `WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${baseUrl
        .replace("http:", "ws:")
        .replace("https:", "wss:")}/wss`
    );
    console.log(`–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${baseUrl}/admin`);
    console.log(`API –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${baseUrl}/api/leaderboard`);
  });

  return { server, wsService };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function bootstrap() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();

    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    let server = null;
    if (config.WebServer) {
      console.log("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...");
      server = initWebServer(config.expressServerPort);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    const bot = initBot();

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const shutdown = async () => {
      console.log("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
      bot.stop("SIGTERM");
      await database.close();
      process.exit(0);
    };

    process.once("SIGINT", shutdown);
    process.once("SIGTERM", shutdown);

    return { bot, server };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bootstrap();
