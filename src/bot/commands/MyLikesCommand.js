import { Markup } from "telegraf";
import { BaseCommand } from "./BaseCommand.js";
import catService from "../../services/CatService.js";

export class MyLikesCommand extends BaseCommand {
  constructor() {
    super("mylikes", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ª–∞–π–∫–∏");
    this.register();
  }

  register() {
    this.composer.command(this.name, async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        const userLikes = await catService.getUserLikes(userId);

        if (!userLikes || userLikes.length === 0) {
          await ctx.reply("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ üòø");
          return;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await this.sendLikeInfo(ctx, userLikes, 0);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤:", error);
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤"
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–∞–π–∫–∞–º
    this.composer.action(/^like_nav:(prev|next):(\d+)$/, async (ctx) => {
      try {
        const userId = ctx.from.id.toString();
        const userLikes = await catService.getUserLikes(userId);

        if (!userLikes || userLikes.length === 0) {
          await ctx.answerCbQuery("–°–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –ø—É—Å—Ç");
          return;
        }

        const action = ctx.match[1]; // prev –∏–ª–∏ next
        let currentIndex = parseInt(ctx.match[2]);

        if (action === "next") {
          currentIndex = (currentIndex + 1) % userLikes.length;
        } else {
          currentIndex =
            (currentIndex - 1 + userLikes.length) % userLikes.length;
        }

        await this.sendLikeInfo(ctx, userLikes, currentIndex, true);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–∞–π–∫–∞–º:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      }
    });

    this.composer.action(/^like_details:(.+)$/, async (ctx) => {
      try {
        const catId = ctx.match[1];
        const catDetails = await catService.getCatById(catId);

        if (!catDetails) {
          await ctx.answerCbQuery("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
          return;
        }

        // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const detailsMessage =
          `*${catDetails.breed_name}*\n\n` +
          `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${catDetails.description}\n\n` +
          `*–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:* ${catDetails.origin}\n` +
          `*–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:* ${catDetails.temperament}\n` +
          `*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:* ${catDetails.life_span}\n` +
          `*–í–µ—Å:* ${catDetails.weight_imperial} —Ñ—É–Ω—Ç–æ–≤ (${catDetails.weight_metric} –∫–≥)\n` +
          `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤:* ${catDetails.count}\n\n` +
          `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏](${catDetails.wikipedia_url})`;

        await ctx.replyWithPhoto(
          { url: catDetails.image_url },
          {
            caption: detailsMessage,
            parse_mode: "Markdown",
            ...Markup.inlineKeyboard([
              [Markup.button.callback("üëç –õ–∞–π–∫", `data-${catDetails.id}`)],
            ]),
          }
        );

        await ctx.answerCbQuery("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ –∫–æ—Ç–µ:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
      }
    });
  }

  async sendLikeInfo(ctx, userLikes, index, isEdit = false) {
    const likeInfo = userLikes[index];
    const total = userLikes.length;
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", `like_nav:prev:${index}`),
        Markup.button.callback("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è", `like_nav:next:${index}`),
      ],
      [
        // –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É URL –Ω–∞ callback-–∫–Ω–æ–ø–∫—É
        Markup.button.callback(
          "üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
          `like_details:${likeInfo.cat_id}`
        ),
      ],
    ]);

    const caption = `*${likeInfo.breed_name}*\n\nüëç –õ–∞–π–∫ ${
      index + 1
    } –∏–∑ ${total}`;

    if (isEdit && ctx.callbackQuery && ctx.callbackQuery.message) {
      try {
        await ctx.editMessageMedia(
          {
            type: "photo",
            media: likeInfo.image_url,
            caption: caption,
            parse_mode: "Markdown",
          },
          { reply_markup: keyboard.reply_markup }
        );
      } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ —Ç–∞–∫–æ–µ –∂–µ), –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        await ctx.editMessageCaption(caption, {
          parse_mode: "Markdown",
          reply_markup: keyboard.reply_markup,
        });
      }
    } else {
      await ctx.replyWithPhoto(
        { url: likeInfo.image_url },
        {
          caption: caption,
          parse_mode: "Markdown",
          ...keyboard,
        }
      );
    }
  }
}

export default new MyLikesCommand();
